package batiment;

import java.util.HashMap;
import java.util.Iterator;

import personnes.*;

public class Boulangerie {
	private String nom;
	private Reserve reserve;
	private Caisse caisse;
	private Etalage etalage;
	private HashMap<String,Employe> employes = new HashMap<String,Employe>();
	
	StringBuilder presentation = new StringBuilder();
	
	public Boulangerie(String nom){
		this.reserve = new Reserve();
		this.etalage = new Etalage();
		this.caisse = new Caisse();
		this.nom= nom;

	}
	
	public StringBuilder bienvenue() {
		presentation.setLength(0);
		presentation.append("Bienvenue à : " + this.nom);
		return presentation;
	}
	
	
	  //============================================//
	 //Les méthodes liées à la réserve et l'étalage//
	//============================================//
	
	//Dépenser/ajouter des ingrédients à la reserve
	public void depenseIngredient(String ingredient, Double qty) {
		this.reserve.depenseQty(ingredient, qty);
	}
	public void ajouterIngredient(String ingredient,Double qty) {
		this.reserve.ajouterQty(ingredient, qty);
	}
	
	//Dépenser/ajouter des produits à l'étalage
	public void depenseProduit(String ingredient, Double qty) {
		this.etalage.depenseQty(ingredient, qty);
	}
	public void ajoutProduit(String ingredient, Double qty) {
		this.etalage.ajouterQty(ingredient, qty);
	}
	
	//Verifie que le produit existe
	public boolean ingredientExiste(String ingredient) {
		return reserve.prixProduit.containsKey(ingredient);
	}
	
	//Donne la map des quantités d'ingrédients
	public HashMap<String,Double> getStockMap() {
		return this.reserve.qtyProduit;
	}
	
	//Donne la map des unites des ingrédients
	public HashMap<String,String> getStockUnite(){
		return this.reserve.uniteProduit;
	}
	
	//Donne la map des quantités de produit
	public HashMap<String,Double> getEtalageMap() {
		return this.etalage.qtyProduit;
	}
	
	
	  //==============================//
	 //Les méthodes liées à la caisse//
	//==============================//
	
	public void gagnerArgent(double gain) {
		gain = caisse.getArgent() + gain;
		caisse.setArgent(gain);
	}
	
	public void perdreArgent(double perte) {
		perte = caisse.getArgent() - perte;
		caisse.setArgent(perte);
	}
	
	public boolean enoughtFunds(double perte) {
		return caisse.getArgent()-perte >=0;
	}
	
	public double afficherArgent() {
		return caisse.getArgent();
	}

	  //===========================//
	 //Les méthodes liées aux prix//
	//===========================//
	public double prixIngredient(String ingredient) {
		return reserve.getPrix(ingredient);
	}
	
	public double prixProduit(String produit) {
		return etalage.getPrix(produit);
	}
	
	  //===============================//
	 //Les méthodes liées aux employés//
	//===============================//
	public Employe getEmploye(String nom) {
		return employes.get(nom);
	}
	
	public boolean isEmploye(String nom) {
		return employes.containsKey(nom);
	}
	
	public void addEmploye(Employe employe,String nom) {
		employes.put(nom, employe);
	}
	
	public void removeEmploye(String nom) {
		employes.remove(nom);
	}
	
	public HashMap<String,Employe> getEmployeMap(){
		return this.employes;
	}

	
//=====================================================================//
//					La reserve est une classe interne			   	   //
//=====================================================================//
	
	
	private static class Reserve extends Stock{
		HashMap<String,String> uniteProduit = new HashMap<>();
		
		public static final String BEURRE = "beurre";
		public static final String CHOCOLAT = "chocolat";
		public static final String FARINE = "farine";
		public static final String LAIT = "lait";
		public static final String LEVURE = "levure";
		public static final String OEUF = "oeuf";
		public static final String SEL = "sel";
		public static final String SUCRE = "sucre";
		public static final String KILOGRAMMES = "kilogrammes";
		
		
		private Reserve() {
			//Initialisation des éléments de qtyIngredient
			qtyProduit.put(BEURRE, 0.0);
			qtyProduit.put(CHOCOLAT, 0.0);
			qtyProduit.put(FARINE, 0.0);
			qtyProduit.put(LAIT, 0.0);
			qtyProduit.put(LEVURE, 0.0);
			qtyProduit.put(OEUF, 0.0);
			qtyProduit.put(SEL, 0.0);
			qtyProduit.put(SUCRE, 0.0);
			
			//Initialisation des éléments de prixIngredient
			prixProduit.put(BEURRE, 7.55);
			prixProduit.put(CHOCOLAT, 8.0);
			prixProduit.put(FARINE, 1.0);
			prixProduit.put(LAIT, 1.24);
			prixProduit.put(LEVURE, 8.42);
			prixProduit.put(OEUF, 0.34);
			prixProduit.put(SEL, 0.57);
			prixProduit.put(SUCRE, 0.85);
			
			//Initialisation des éléments de uniteIngredient
			uniteProduit.put(BEURRE, KILOGRAMMES);
			uniteProduit.put(CHOCOLAT, KILOGRAMMES);
			uniteProduit.put(FARINE, KILOGRAMMES);
			uniteProduit.put(LAIT, "litres");
			uniteProduit.put(LEVURE, KILOGRAMMES);
			uniteProduit.put(OEUF, "unites");
			uniteProduit.put(SEL, KILOGRAMMES);
			uniteProduit.put(SUCRE, KILOGRAMMES);

		}


		@Override
		public Iterator<Object> iterator() {
			return null;
		}

		
	}
	
	
//=====================================================================//
// 				L'étalage est une classe interne	   		   	       //
//=====================================================================//
	private static class Etalage extends Stock{
		public static final String BAGUETTE = "baguette";
		public static final String CHOCOLATINE = "chocolatine";
		public static final String CROISSANT = "croissant";
		public static final String UNITE = "unité";
		
		
		private Etalage() {
			//Initialisation de qtyProduit
			qtyProduit.put(BAGUETTE, 0.0);
			qtyProduit.put(CHOCOLATINE, 0.0);
			qtyProduit.put(CROISSANT, 0.0);
			
			//Initialisation de prixProduit
			prixProduit.put(BAGUETTE, 1.0);
			prixProduit.put(CHOCOLATINE, 7.55);
			prixProduit.put(CROISSANT, 8.0);
			
			//Initialisation des éléments de uniteIngredient
			uniteProduit.put(BAGUETTE, UNITE);
			uniteProduit.put(CHOCOLATINE, UNITE);
			uniteProduit.put(CROISSANT, UNITE);
		}


		@Override
		public Iterator<Object> iterator() {
			return null;
		}
		

	}
	

	
//=====================================================================//
//			 	La caisse est une classe interne	   		   	       //
//=====================================================================//
	
	private static class Caisse{
		private double argent;
		
		//Le constructeur
		private Caisse() {
			this.argent=0;
		}
		
		//Les méthodes de la caisse
		private double getArgent() {
			return this.argent;
		}
		
		private void setArgent(double argent) {
			this.argent=argent;
		}
		
	}

}
